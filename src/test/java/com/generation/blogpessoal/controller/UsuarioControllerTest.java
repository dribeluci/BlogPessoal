package com.generation.blogpessoal.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Optional;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.TestTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.generation.blogpessoal.model.Usuario;
import com.generation.blogpessoal.model.UsuarioLogin;
import com.generation.blogpessoal.repository.UsuarioRepository;
import com.generation.blogpessoal.service.UsuarioService;

/*O teste da Camada Controller realizar√° Requisi√ß√µes (http Request) 
 * e na sequencia o teste analisar√° se as Respostas das Requisi√ß√µes (http Response) foram as esperadas.
 */

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
/*a anota√ß√£o @TestMethodOrder indica em qual ordem os testes ser√£o
executados. A op√ß√£o MethodOrderer.OrderAnnotaon.class indica que os testes ser√£o
executados na ordem indicada pela anota√ß√£o @Order inserida em cada teste. Exemplo:
@Order(1) ü°™ indica que este ser√° o primeiro teste que ser√° executado
 */
public class UsuarioControllerTest {

	// fiz essa inje√ß√£o abaixo para que as requisi√ß√µes feitas no nosso teste, sejam enviadas
	// para nossa aplica√ß√£o .
	@Autowired
	private TestRestTemplate testRestTemplate;
	// fiz duas inje√ß√µes porque preciso do service para testar o controller e do banco de dados
	// de usu√°rios, visto que √© ele que far√° as requisi√ß√µes necess√°rias.
	@Autowired
	private UsuarioService usuarioService;

	@Autowired
	private UsuarioRepository usuarioRepository;
	
	@BeforeAll
	void start(){

		usuarioRepository.deleteAll();}
	
	@Test
	@DisplayName ("Cadastrar usu√°rio")
	@Order (1)
	public void criarusuario() {
		// A anota√ß√£o HttpEntity comp√µe os status das respostas, ou seja, 100,200,300,400,500
		HttpEntity<Usuario> Requisicao = new HttpEntity<Usuario>(new Usuario(0L, 
			"Paulo Antunes", "paulo_antunes@email.com.br", "13465278", "https://i.imgur.com/JR7kUFU.jpg"));

		/* Acima foi criado um objeto da Classe HttpEntity chamado requisicao, recebendo
 		um objeto da Classe Usuario. Nesta etapa, o processo √© equivalente ao que o Insonia
		faz em uma requisi√ß√£o do po POST: Transforma os atributos num objeto da Classe
		Usuario, que ser√° enviado no corpo da requisi√ß√£o (Request Body).
		 */
		
		
		ResponseEntity<Usuario> Resposta = testRestTemplate
			.exchange("/usuarios/cadastrar", HttpMethod.POST, Requisicao, Usuario.class);

		/*a Requisi√ß√£o HTTP ser√° enviada atrav√©s do m√©todo exchange() da Classe
		TestRestTemplate e a Resposta da Requisi√ß√£o (Response) ser√° recebida pelo objeto
		resposta do tipo ResponseEnty. Para enviar a requisi√ß√£o, √© necess√°rio passar 4
		par√¢metros:
		 * A URI: Endere√ßo do endpoint (/usuarios/cadastrar);
		* O M√©todo HTTP: Neste exemplo o m√©todo POST;
		* O Objeto HpEnty: Neste exemplo o objeto requisicao, que cont√©m o objeto da
		Classe Usuario;
		* O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo
		ser√° do po Usuario (Usuario.class).

		 */
		
		assertEquals(HttpStatus.CREATED, Resposta.getStatusCode());
		// esse m√©todo acima verifica se o status √© correto, no caso tem que ser 201, visto que √©
		// uma postagem.
		
		assertEquals(Requisicao.getBody().getNome(), Resposta.getBody().getNome());
		// Verifica se o Atributo Usuario do Objeto da Classe Usuario retornado no Corpo da Requisi√ß√£o 
		//√© igual ao Atributo Usuario do Objeto da Classe Usuario Retornado no Corpo da Resposta
		
		assertEquals(Requisicao.getBody().getUsuario(), Resposta.getBody().getUsuario());
		// realiza a mesma fun√ß√£o que o m√©todo acima s√≥ que utilizando o dado usu√°rio,
		// que no caso √© o Email.
	}
	
	@Test
	@Order(2)
	@DisplayName("N√£o deve permitir duplica√ß√£o do Usu√°rio")
	public void naoDeveDuplicarUsuario() {

		usuarioService.cadastrarUsuario(new Usuario(0L, 
			"Maria da Silva", "maria_silva@email.com.br", "13465278", "https://i.imgur.com/T12NIp9.jpg"));

		HttpEntity<Usuario> Requisicao = new HttpEntity<Usuario>(new Usuario(0L, 
			"Maria da Silva", "maria_silva@email.com.br", "13465278", "https://i.imgur.com/T12NIp9.jpg"));

		ResponseEntity<Usuario> Resposta = testRestTemplate
			.exchange("/usuarios/cadastrar", HttpMethod.POST, Requisicao, Usuario.class);

		assertEquals(HttpStatus.BAD_REQUEST, Resposta.getStatusCode());
		// basicamente todo esse c√≥digo acima cadastra um novo usu√°rio, isso √© feito utilizando
		// o service, depois criamos uma requi√ß√£o utilzando o HttpEntity e por √∫ltimo utilizamos
		// o responseEntity para realizar uma requisi√ß√£o, que no caso √© do tipo post e vai tentar
		// cadastrar um usu√°rio que j√° existe, logo tem que da um retorno 400, caso contr√°rio o c√≥digo
		// n√£o est√° funcionando perfeitamente.
	}

	@Test
	@Order(3)
	@DisplayName("Atualizar um Usu√°rio")
	public void deveAtualizarUmUsuario() {

		// aqui est√° cadastrando um novo usu√°rio.
		Optional<Usuario> usuarioCadastrado = usuarioService.cadastrarUsuario(new Usuario(0L, 
			"Juliana Andrews", "juliana_andrews@email.com.br", "juliana123", "https://i.imgur.com/yDRVeK7.jpg"));
		
		Usuario usuarioUpdate = new Usuario(usuarioCadastrado.get().getId(), 
			"Juliana Andrews Ramos", "juliana_ramos@email.com.br", "juliana123" , "https://i.imgur.com/yDRVeK7.jpg");
		
		
		// aqui √© feito a requisi√ß√£o para atualizar o usu√°rio utilizando o objeto criado, que no caso
		// √© o usuarioUpdate.
		HttpEntity<Usuario> Requisicao = new HttpEntity<Usuario>(usuarioUpdate);

		
		ResponseEntity<Usuario> Resposta = testRestTemplate
			.withBasicAuth("root", "root")
			/* como o Blog Pessoal est√° com o Spring Security habilitado
			com autenca√ß√£o do po Hp Basic, o Objeto testRestTemplate dos endpoints que
			exigem autenca√ß√£o, dever√° efetuar o login com um usu√°rio e uma senha v√°lida para
			realizar os testes. Para autencar o usu√°rio e a senha ulizaremos o m√©todo
			withBasicAuth(user, password) da Classe TestRestTemplate. Como criamos o usu√°rio
			em mem√≥ria (root), na Classe BasicSecurityConfig, vamos us√°-lo para autencar o
			nosso teste.
			 */
			.exchange("/usuarios/atualizar", HttpMethod.PUT, Requisicao, Usuario.class);

		// aqui est√£o as respostas esperadas, caso algo de errado tem algo errado que precisa
		// ser corrigido no c√≥digo.
		assertEquals(HttpStatus.OK, Resposta.getStatusCode());

		assertEquals(Requisicao.getBody().getNome(), Resposta.getBody().getNome());

		
		assertEquals(Requisicao.getBody().getUsuario(), Resposta.getBody().getUsuario());
	}

	@Test
	@Order(4)
	@DisplayName("Listar todos os Usu√°rios")
	public void deveMostrarTodosUsuarios() {
		// esses dois usuarioService est√° cadastrando 2 novos usu√°rios que devem ser retornados.
		usuarioService.cadastrarUsuario(new Usuario(0L, 
			"Sabrina Sanches", "sabrina_sanches@email.com.br", "sabrina123", "https://i.imgur.com/5M2p5Wb.jpg"));
		
		usuarioService.cadastrarUsuario(new Usuario(0L, 
			"Ricardo Marques", "ricardo_marques@email.com.br", "ricardo123", "https://i.imgur.com/Sk5SjWE.jpg"));
		
		ResponseEntity<String> resposta = testRestTemplate
			.withBasicAuth("root", "root") // autenticar o usu√°rio para retornar.
			.exchange("/usuarios/tudo", HttpMethod.GET, null, String.class);

		// resposta esperada.
		assertEquals(HttpStatus.OK, resposta.getStatusCode());

	}
	@Test
	@Order (5)
	@DisplayName("Retornar pelo ID")
	
	public void retornarpeloid() {
		Optional<Usuario> existeid = usuarioService.cadastrarUsuario(new Usuario(0L,"Felipe Santos","Felipe@email.com.br","lipe12345",""));
		// agora preciso autenticar para consultar pelo id
		ResponseEntity<String> resposta = testRestTemplate
				.withBasicAuth("root", "root") // autenticar o usu√°rio para retornar.
				.exchange("/usuarios/" + existeid.get().getId(), HttpMethod.GET, null, String.class);
		// vou configurar a resposta esperada, se der errado √© pq tem algo errado no c√≥digo ou no teste.
		assertEquals(HttpStatus.OK,resposta.getStatusCode());
	}
	
	@Test
	@Order (6)
	@DisplayName("Login")
	public void Login () {
		// vou cadastrar um usu√°rio
		usuarioService.cadastrarUsuario(new Usuario(0L, 
				"Sabrina Sanches", "felipe@email.com.br", "12345678", "https://i.imgur.com/5M2p5Wb.jpg"));
		// agora vou criar a requisi√ß√£o de login
		HttpEntity<UsuarioLogin> resposta = new HttpEntity<UsuarioLogin>(new UsuarioLogin("felipe@email.com.br", "12345678"));

		// vou usar para gerar a resposta do status e dar o caminho para as requisi√ß√µes
		ResponseEntity<UsuarioLogin> corporesposta = testRestTemplate.exchange("/usuarios/logar", HttpMethod.POST, resposta, UsuarioLogin.class);
		
		// confirma se est√° tudo correto
		assertEquals(HttpStatus.OK, corporesposta.getStatusCode());

	}
	


	}
	
	

	
	
	
	
	
